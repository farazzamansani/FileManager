// <auto-generated />
using System;
using FileDatabase.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FileDatabase.Migrations
{
    [DbContext(typeof(FileDatabaseContext))]
    partial class FileDatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FileDatabase.Models.File", b =>
                {
                    b.Property<int>("Fileid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("fileid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Fileid"));

                    b.Property<byte[]>("Filedata")
                        .IsRequired()
                        .HasColumnType("bytea")
                        .HasColumnName("filedata");

                    b.Property<string>("Filetype")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("filetype");

                    b.Property<int>("Folderid")
                        .HasColumnType("integer")
                        .HasColumnName("folderid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<DateTimeOffset>("UploadedDateTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("uploadeddatetime")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("Fileid")
                        .HasName("files_pkey");

                    b.HasIndex("Folderid");

                    b.ToTable("files", (string)null);
                });

            modelBuilder.Entity("FileDatabase.Models.Folder", b =>
                {
                    b.Property<int>("Folderid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("folderid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Folderid"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("name");

                    b.Property<int?>("Parentfolderid")
                        .HasColumnType("integer")
                        .HasColumnName("parentfolderid");

                    b.HasKey("Folderid")
                        .HasName("folders_pkey");

                    b.HasIndex("Parentfolderid");

                    b.ToTable("folders", (string)null);
                });

            modelBuilder.Entity("FileDatabase.Models.File", b =>
                {
                    b.HasOne("FileDatabase.Models.Folder", "Folder")
                        .WithMany("Files")
                        .HasForeignKey("Folderid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("files_folderid_fkey");

                    b.Navigation("Folder");
                });

            modelBuilder.Entity("FileDatabase.Models.Folder", b =>
                {
                    b.HasOne("FileDatabase.Models.Folder", "Parentfolder")
                        .WithMany("InverseParentfolder")
                        .HasForeignKey("Parentfolderid")
                        .HasConstraintName("folders_parentfolderid_fkey");

                    b.Navigation("Parentfolder");
                });

            modelBuilder.Entity("FileDatabase.Models.Folder", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("InverseParentfolder");
                });
#pragma warning restore 612, 618
        }
    }
}
